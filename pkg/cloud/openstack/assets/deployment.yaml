kind: Deployment
apiVersion: apps/v1
metadata:
  name: openstack-cloud-controller-manager
  namespace: openshift-cloud-controller-manager
  labels:
    k8s-app: openstack-cloud-controller-manager
    infrastructure.openshift.io/cloud-controller-manager: {{ .cloudproviderName }}
spec:
  replicas: 2
  selector:
    matchLabels:
      k8s-app: openstack-cloud-controller-manager
      infrastructure.openshift.io/cloud-controller-manager: {{ .cloudproviderName }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
      labels:
        k8s-app: openstack-cloud-controller-manager
        infrastructure.openshift.io/cloud-controller-manager: {{ .cloudproviderName }}
    spec:
      hostNetwork: true
      serviceAccount: cloud-controller-manager
      priorityClassName: system-cluster-critical
      nodeSelector:
        node-role.kubernetes.io/master: ""
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchLabels:
                k8s-app: openstack-cloud-controller-manager
                infrastructure.openshift.io/cloud-controller-manager: {{ .cloudproviderName }}
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: "NoSchedule"
        - key: node.cloudprovider.kubernetes.io/uninitialized
          operator: Exists
          effect: NoSchedule
        - key: node.kubernetes.io/not-ready
          operator: Exists
          effect: NoSchedule
      containers:
        - name: cloud-controller-manager
          image: {{ .images.CloudControllerManager }}
          imagePullPolicy: "IfNotPresent"
          env:
            - name: CLOUD_CONFIG
              value: /etc/openstack/config/cloud.conf
            - name: OCP_INFRASTRUCTURE_NAME
              value: {{ .infrastructureName }}
          command:
          - /bin/bash
          - -c
          - |
            #!/bin/bash
            set -o allexport
            if [[ -f /etc/kubernetes/apiserver-url.env ]]; then
              source /etc/kubernetes/apiserver-url.env
            fi
            exec /usr/bin/openstack-cloud-controller-manager \
            --v=1 \
            --cloud-config=$(CLOUD_CONFIG) \
            --cloud-provider=openstack \
            --cluster-name=$(OCP_INFRASTRUCTURE_NAME) \
            --use-service-account-credentials=true \
            --configure-cloud-routes=false \
            --bind-address=127.0.0.1 \
            --leader-elect=true \
            --leader-elect-lease-duration=137s \
            --leader-elect-renew-deadline=107s \
            --leader-elect-retry-period=26s \
            --leader-elect-resource-namespace=openshift-cloud-controller-manager \
            --feature-gates={{ .featureGates }} \
            --secure-port=0
          ports:
          - containerPort: 10258
            name: https
            protocol: TCP
          resources:
            requests:
              cpu: 200m
              memory: 50Mi
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /etc/kubernetes
              name: host-etc-kube
              readOnly: true
            - name: secret-occm
              mountPath: /etc/openstack/secret
              readOnly: true
            - name: cloud-config
              mountPath: /etc/openstack/config
              readOnly: true
            - name: trusted-ca
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
      volumes:
        - name: host-etc-kube
          hostPath:
            path: /etc/kubernetes
            type: Directory
        - name: secret-occm
          secret:
            secretName: openstack-cloud-credentials
            items:
              - key: clouds.yaml
                path: clouds.yaml
        - name: trusted-ca
          configMap:
            name: ccm-trusted-ca
            items:
              - key: ca-bundle.crt
                path: tls-ca-bundle.pem
        - name: cloud-config
          configMap:
            name: cloud-conf
            items:
              - key: cloud.conf
                path: cloud.conf
